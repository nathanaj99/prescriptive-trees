y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1))
tic('policytree')
tree <- policy_tree(X_train, scores, 2)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
print(df_test$y0)
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, 'NA')))
print(node.id)
print(df_test$t_opt)
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
df_train <- read.csv(glue('data_train_0.1_1.csv'))
df_test <- read.csv(glue('data_test_0.1_1.csv'))
run(df_train, df_test)
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, linear0,
ifelse(t==1, linear1, 'NA'))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('linear0', 'linear1')]
scores <- scores %>% rename('0'='linear0',
'1'="linear1")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1))
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1))
tic('policytree')
tree <- policy_tree(X_train, scores, 2)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0,
ifelse(y1 > y0, 1, 'NA')))
print(node.id)
print(df_test$t_opt)
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
df_train <- read.csv(glue('data_train_0.1_1.csv'))
df_test <- read.csv(glue('data_test_0.1_1.csv'))
run(df_train, df_test)
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, linear0,
ifelse(t==1, linear1, 'NA'))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('linear0', 'linear1')]
scores <- scores %>% rename('0'='linear0',
'1'="linear1")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1))
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1))
tic('policytree')
tree <- policy_tree(X_train, scores, 2)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0,
ifelse(y1 > y0, 1, 'NA'))) %>%
transform(t_opt = as.numeric(t_opt))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
df_train <- read.csv(glue('data_train_0.1_1.csv'))
df_test <- read.csv(glue('data_test_0.1_1.csv'))
run(df_train, df_test)
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, linear0,
ifelse(t==1, linear1, 'NA'))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('linear0', 'linear1')]
scores <- scores %>% rename('0'='linear0',
'1'="linear1")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1))
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1))
tic('policytree')
tree <- policy_tree(X_train, scores, 2)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0,
ifelse(y1 > y0, 1, 'NA')))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
df_train <- read.csv(glue('data_train_0.1_1.csv'))
df_test <- read.csv(glue('data_test_0.1_1.csv'))
run(df_train, df_test)
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, run(df_train, df_test))
}
}
splits <- c('1', '2', '3', '4', '5')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, run(df_train, df_test))
}
}
mean(oosp0.1)
mean(oosp_0.1)
dataset_type <- '0.25'
oosp_0.25 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.25 <- append(oosp_0.25, run(df_train, df_test))
}
}
dataset_type <- '0.5'
oosp_0.5 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.5 <- append(oosp_0.5, run(df_train, df_test))
}
}
dataset_type <- '0.75'
oosp_0.75 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.75 <- append(oosp_0.75, run(df_train, df_test))
}
}
dataset_type <- '0.9'
oosp_0.9 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.9 <- append(oosp_0.9, run(df_train, df_test))
}
}
results_synthetic = data.frame(p0.1=oosp_0.1, p0.25=oosp_0.25, p0.5=oosp_0.5, p0.75=oosp_0.75,
p0.9=oosp_0.9)
colMeans(results_synthetic)
View(results)
View(results)
transformed_results = data.frame()
for(i in 1:ncol(results)) {
buffer = data.frame(exp_design=rep(i, 25), oosp=results[, i])
transformed_results <- rbind(transformed_results, buffer)
}
View(transformed_results)
p <- ggplot(results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
p <- ggplot(transformed_results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
View(transformed_results)
for(i in 1:ncol(results)) {
buffer = data.frame(exp_design=rep(as.character(i), 25), oosp=results[, i])
transformed_results <- rbind(transformed_results, buffer)
}
p <- ggplot(transformed_results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
View(transformed_results)
transformed_results = data.frame()
for(i in 1:ncol(results)) {
buffer = data.frame(exp_design=rep(as.character(i), 25), oosp=results[, i])
transformed_results <- rbind(transformed_results, buffer)
}
p <- ggplot(transformed_results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
transformed_results = data.frame()
for(i in 1:ncol(results)) {
print(names(results))
buffer = data.frame(exp_design=rep(names(results)[i], 25), oosp=results[, i])
transformed_results <- rbind(transformed_results, buffer)
}
transformed_results = data.frame()
for(i in 1:ncol(results)) {
print(names(results)[i])
buffer = data.frame(exp_design=rep(names(results)[i], 25), oosp=results[, i])
transformed_results <- rbind(transformed_results, buffer)
}
p <- ggplot(transformed_results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
View(transformed_results)
if(Sys.info()["user"] == "elinor"){
setwd("/Users/elinor/GitHub/epa_notifications/data/causal_forest")
} else{
setwd('/Users/nathanjo/Documents/Github/npdes_notifications/data/causal_forest/')
}
options(scipen = 999)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 1. Load Merged Data for Analysis (from Prior Scripts) ------
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df <- read.csv('ols_late_violations.csv')
fit <- lm(late_submission_rate ~ major_permit_flag + individual_permit_flag + stormwater_permit_flag + mining_ind + manufacturing_ind + missing_vars + NON.POTW + POTW + AK + AR + state.region + CO + KY + MD + NE + R06 + R07 + R08 + R09 + R10 + SD + TN + TX + nmbr_of_report + num_params + FacPopDen + FacPercentMinority, data = df)
if(Sys.info()["user"] == "elinor"){
setwd("/Users/elinor/GitHub/epa_notifications/data/late_violations")
} else{
setwd('/Users/nathanjo/Documents/Github/npdes_notifications/data/late_violations/')
}
options(scipen = 999)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 1. Load Merged Data for Analysis (from Prior Scripts) ------
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df <- read.csv('ols_late_violations.csv')
fit <- lm(late_submission_rate ~ major_permit_flag + individual_permit_flag + stormwater_permit_flag + mining_ind + manufacturing_ind + missing_vars + NON.POTW + POTW + AK + AR + state.region + CO + KY + MD + NE + R06 + R07 + R08 + R09 + R10 + SD + TN + TX + nmbr_of_report + num_params + FacPopDen + FacPercentMinority, data = df)
set.seed(42)
if(Sys.info()["user"] == "elinor"){
setwd("/Users/elinor/GitHub/epa_notifications/data/causal_forest")
} else{
setwd('/Users/nathanjo/Documents/Github/npdes_notifications/data/causal_forest/')
}
options(scipen = 999)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 1. Load Merged Data for Analysis (from Prior Scripts) ------
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
df <- read.csv('input/survival_cf_df.csv')
View(df)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 4. Visualization and Analysis
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cate_dist = function(type, df_tau) {
## a) Save CATE histogram
mean_cate <- df_tau %>%
pull(predictions) %>%
mean() %>%
signif(6)
if(grepl('reportable_ontime', type, fixed = TRUE)){
ggplot(df_tau, aes(x=predictions)) + geom_histogram(bins=50) + xlab("CATE") + ylab('') + theme(text = element_text(size = 30)) + geom_vline(xintercept=mean_cate, size=1, color="red")
} else{
ggplot(df_tau, aes(x=predictions)) + geom_histogram(bins=50) + xlab("CATE") + theme(text = element_text(size = 30)) + geom_vline(xintercept=mean_cate, size=1, color="red")
}
ggsave(glue("figs/cate_dist_{type}.pdf"))
}
type = 'reportable_ontime'
df_tau <- read.csv(glue('output/cf_pred_kfold_{type}.csv'))
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 4. Visualization and Analysis
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cate_dist = function(type, df_tau) {
## a) Save CATE histogram
mean_cate <- df_tau %>%
pull(predictions) %>%
mean() %>%
signif(6)
if(grepl('reportable_ontime', type, fixed = TRUE)){
ggplot(df_tau, aes(x=predictions)) + geom_histogram(bins=50) + xlab("CATE") + ylab('') + theme(text = element_text(size = 30)) + geom_vline(xintercept=mean_cate, size=1, color="red")
} else{
ggplot(df_tau, aes(x=predictions)) + geom_histogram(bins=50) + xlab("CATE") + theme(text = element_text(size = 30)) + geom_vline(xintercept=mean_cate, size=1, color="red")
}
# ggsave(glue("figs/cate_dist_{type}.pdf"))
}
type = 'reportable_ontime'
df_tau <- read.csv(glue('output/cf_pred_kfold_{type}.csv'))
cate_dist(df_tau)
cate_dist(type, df_tau)
ggplot(transformed_results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
colMeans(results)
View(results)
View(df)
View(df_train)
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/data/Athey_v1/500/')
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, linear0,
ifelse(t==1, linear1, 'NA'))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('linear0', 'linear1')]
scores <- scores %>% rename('0'='linear0',
'1'="linear1")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1))
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1))
tic('policytree')
tree <- policy_tree(X_train, scores, 3)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0,
ifelse(y1 > y0, 1, 'NA')))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
splits <- c('1', '2', '3', '4', '5')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, run(df_train, df_test))
}
}
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/data/Warfarin_v2/')
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, ml0,
ifelse(t==1, ml1, ifelse(t==2, ml2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('ml0', 'ml1', 'ml2')]
scores <- scores %>% rename('0'='ml0',
'1'="ml1",
'2'="ml2")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , !(names(df_train) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1, 2))
X_test <- data.matrix(df_test[ , !(names(df_test) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1, 2))
tic('policytree')
tree <- policy_tree(X_train, scores, 3)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, ifelse(y2 == 1, 2, 'NA'))))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, ml0,
ifelse(t==1, ml1, ifelse(t==2, ml2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('ml0', 'ml1', 'ml2')]
scores <- scores %>% rename('0'='ml0',
'1'="ml1",
'2'="ml2")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , !(names(df_train) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1, 2))
X_test <- data.matrix(df_test[ , !(names(df_test) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1, 2))
tic('policytree')
tree <- policy_tree(X_train, scores, 3)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, ifelse(y2 == 1, 2, 'NA'))))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
seed = '1'
split = '1'
df_train <- read.csv(glue('seed{seed}/data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('seed{seed}/data_test_{dataset_type}_{split}.csv'))
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, ml0,
ifelse(t==1, ml1, ifelse(t==2, ml2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('ml0', 'ml1', 'ml2')]
scores <- scores %>% rename('0'='ml0',
'1'="ml1",
'2'="ml2")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , !(names(df_train) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1, 2))
X_test <- data.matrix(df_test[ , !(names(df_test) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1, 2))
tic('policytree')
tree <- policy_tree(X_train, scores, 3)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, ifelse(y2 == 1, 2, 'NA'))))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
(df_train, df_test)
run(df_train, df_test)
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/data/Warfarin_v2/')
run = function(df_train, df_test) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, ml0,
ifelse(t==1, ml1, ifelse(t==2, ml2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('ml0', 'ml1', 'ml2')]
scores <- scores %>% rename('0'='ml0',
'1'="ml1",
'2'="ml2")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
scores <- get_scores(df_train)
X_train <- data.matrix(df_train[ , !(names(df_train) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1, 2))
X_test <- data.matrix(df_test[ , !(names(df_test) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred'))])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1, 2))
tic('policytree')
tree <- policy_tree(X_train, scores, 3)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, ifelse(y2 == 1, 2, 'NA'))))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
seeds <- c('1', '2', '3', '4', '5')
splits <- c('1', '2', '3', '4', '5')
dataset_type <- '0.33'
seed = '1'
split = '1'
df_train <- read.csv(glue('seed{seed}/data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('seed{seed}/data_test_{dataset_type}_{split}.csv'))
run(df_train, df_test)
