if(val > 0) {
assign_t <- append(assign_t, 1)
}
else {
assign_t <- append(assign_t, 0)
}
}
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0, 1))
df_test = df_test %>% mutate(realized_outcome = ifelse(treatment == 0, y0,
ifelse(treatment == 1, y1,
ifelse(treatment == 2, y2, NA))))
eval_policy <- assign_t == df_test$t_opt
# return(sum(eval_policy)/length(eval_policy))
return(mean(df_test$realized_outcome))
}
splits <- c('1', '2', '3', '4', '5')
seeds <- c('1')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, driver(df_train, df_test))
}
}
driver = function(df_train, df_test) {
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- data.matrix(df_train[c('t')])
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- data.matrix(df_test[c('t')])
forest <- causal_forest(X_train, y_train, t_train, num.trees = 1)
pred <- predict(forest, X_test)
assign_t <- c()
for (row in 1:nrow(pred)) {
val <- pred[row, 1]
# print(val)
if(val > 0) {
assign_t <- append(assign_t, 1)
}
else {
assign_t <- append(assign_t, 0)
}
}
df_test$treatment <- assign_t
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0, 1))
df_test = df_test %>% mutate(realized_outcome = ifelse(treatment == 0, y0,
ifelse(treatment == 1, y1,
ifelse(treatment == 2, y2, NA))))
eval_policy <- assign_t == df_test$t_opt
# return(sum(eval_policy)/length(eval_policy))
return(mean(df_test$realized_outcome))
}
splits <- c('1', '2', '3', '4', '5')
seeds <- c('1')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, driver(df_train, df_test))
}
}
dataset_type <- '0.25'
oosp_0.25 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.25 <- append(oosp_0.25, driver(df_train, df_test))
}
}
dataset_type <- '0.5'
oosp_0.5 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.5 <- append(oosp_0.5, driver(df_train, df_test))
}
}
dataset_type <- '0.75'
oosp_0.75 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.75 <- append(oosp_0.75, driver(df_train, df_test))
}
}
dataset_type <- '0.9'
oosp_0.9 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.9 <- append(oosp_0.9, driver(df_train, df_test))
}
}
results_synthetic = data.frame(p0.1=oosp_0.1, p0.25=oosp_0.25, p0.5=oosp_0.5, p0.75=oosp_0.75,
p0.9=oosp_0.9)
colMeans(results_synthetic)
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/other_methods/results/CF/synthetic')
write.csv(results_synthetic, glue('ct_raw.csv'), row.names = FALSE)
driver = function(df_train, df_test) {
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- data.matrix(df_train[c('t')])
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- data.matrix(df_test[c('t')])
forest <- causal_forest(X_train, y_train, t_train)
pred <- predict(forest, X_test)
assign_t <- c()
for (row in 1:nrow(pred)) {
val <- pred[row, 1]
# print(val)
if(val > 0) {
assign_t <- append(assign_t, 1)
}
else {
assign_t <- append(assign_t, 0)
}
}
df_test$treatment <- assign_t
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0, 1))
df_test = df_test %>% mutate(realized_outcome = ifelse(treatment == 0, y0,
ifelse(treatment == 1, y1,
ifelse(treatment == 2, y2, NA))))
eval_policy <- assign_t == df_test$t_opt
# return(sum(eval_policy)/length(eval_policy))
return(mean(df_test$realized_outcome))
}
splits <- c('1', '2', '3', '4', '5')
seeds <- c('1')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, driver(df_train, df_test))
}
}
dataset_type <- '0.25'
oosp_0.25 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.25 <- append(oosp_0.25, driver(df_train, df_test))
}
}
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/data/Athey_v1/500/')
driver = function(df_train, df_test) {
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- data.matrix(df_train[c('t')])
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- data.matrix(df_test[c('t')])
forest <- causal_forest(X_train, y_train, t_train)
pred <- predict(forest, X_test)
assign_t <- c()
for (row in 1:nrow(pred)) {
val <- pred[row, 1]
# print(val)
if(val > 0) {
assign_t <- append(assign_t, 1)
}
else {
assign_t <- append(assign_t, 0)
}
}
df_test$treatment <- assign_t
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0, 1))
df_test = df_test %>% mutate(realized_outcome = ifelse(treatment == 0, y0,
ifelse(treatment == 1, y1,
ifelse(treatment == 2, y2, NA))))
eval_policy <- assign_t == df_test$t_opt
# return(sum(eval_policy)/length(eval_policy))
return(mean(df_test$realized_outcome))
}
splits <- c('1', '2', '3', '4', '5')
seeds <- c('1')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, driver(df_train, df_test))
}
}
dataset_type <- '0.25'
oosp_0.25 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.25 <- append(oosp_0.25, driver(df_train, df_test))
}
}
dataset_type <- '0.5'
oosp_0.5 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.5 <- append(oosp_0.5, driver(df_train, df_test))
}
}
dataset_type <- '0.75'
oosp_0.75 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.75 <- append(oosp_0.75, driver(df_train, df_test))
}
}
dataset_type <- '0.9'
oosp_0.9 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.9 <- append(oosp_0.9, driver(df_train, df_test))
}
}
results_synthetic = data.frame(p0.1=oosp_0.1, p0.25=oosp_0.25, p0.5=oosp_0.5, p0.75=oosp_0.75,
p0.9=oosp_0.9)
driver = function(df_train, df_test) {
set.seed(16)
X_train <- data.matrix(df_train[ , names(df_train) %in% c('V1', 'V2')])
y_train <- data.matrix(df_train[c('y')])
t_train <- data.matrix(df_train[c('t')])
X_test <- data.matrix(df_test[ , names(df_test) %in% c('V1', 'V2')])
y_test <- data.matrix(df_test[c('y')])
t_test <- data.matrix(df_test[c('t')])
forest <- causal_forest(X_train, y_train, t_train)
pred <- predict(forest, X_test)
assign_t <- c()
for (row in 1:nrow(pred)) {
val <- pred[row, 1]
# print(val)
if(val > 0) {
assign_t <- append(assign_t, 1)
}
else {
assign_t <- append(assign_t, 0)
}
}
df_test$treatment <- assign_t
df_test = df_test %>% mutate(t_opt = ifelse(y0 > y1, 0, 1))
df_test = df_test %>% mutate(realized_outcome = ifelse(treatment == 0, y0,
ifelse(treatment == 1, y1,
ifelse(treatment == 2, y2, NA))))
eval_policy <- assign_t == df_test$t_opt
# return(sum(eval_policy)/length(eval_policy))
return(mean(df_test$realized_outcome))
}
splits <- c('1', '2', '3', '4', '5')
seeds <- c('1')
dataset_type <- '0.1'
oosp_0.1 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.1 <- append(oosp_0.1, driver(df_train, df_test))
}
}
dataset_type <- '0.25'
oosp_0.25 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.25 <- append(oosp_0.25, driver(df_train, df_test))
}
}
dataset_type <- '0.5'
oosp_0.5 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.5 <- append(oosp_0.5, driver(df_train, df_test))
}
}
dataset_type <- '0.75'
oosp_0.75 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.75 <- append(oosp_0.75, driver(df_train, df_test))
}
}
dataset_type <- '0.9'
oosp_0.9 <- c()
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('data_test_{dataset_type}_{split}.csv'))
oosp_0.9 <- append(oosp_0.9, driver(df_train, df_test))
}
}
results_synthetic = data.frame(p0.1=oosp_0.1, p0.25=oosp_0.25, p0.5=oosp_0.5, p0.75=oosp_0.75,
p0.9=oosp_0.9)
colMeans(results_synthetic)
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/other_methods/results/CF/synthetic')
write.csv(results_synthetic, glue('cf_raw.csv'), row.names = FALSE)
library(policytree)
library(grf)
library(tictoc)
library(glue)
library(ggplot2)
library(dplyr)
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/data/Warfarin_v2/rf_balance_proba_white')
run = function(df_train, df_test, depth, dataset_type) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, ml0,
ifelse(t==1, ml1, ifelse(t==2, ml2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('ml0', 'ml1', 'ml2')]
scores <- scores %>% rename('0'='ml0',
'1'="ml1",
'2'="ml2")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
get_scores_not33 = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, lrrf0,
ifelse(t==1, lrrf1, ifelse(t==2, lrrf2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
# scores <- df_train[, c('lrrf0', 'lrrf1', 'lrrf2')]
# scores <- scores %>% rename('0'='lrrf0',
#                             '1'="lrrf1",
#                             '2'="lrrf2")
scores <- df_train[, c('lrrf0', 'lrrf1')]
scores <- scores %>% rename('0'='lrrf0',
'1'="lrrf1")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
if(dataset_type == '0.33') {
scores <- get_scores(df_train)
}
else{
scores <- get_scores_not33(df_train)
}
X_train <- data.matrix(df_train[ , !(names(df_train) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred',
'White', 'lrrf0', 'lrrf1', 'lrrf2',
'lr0', 'lr1', 'lr2'))])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1, 2))
X_test <- data.matrix(df_test[ , !(names(df_test) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred',
'White', 'lrrf0', 'lrrf1', 'lrrf2',
'lr0', 'lr1', 'lr2'))])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1, 2))
tic('policytree')
tree <- policy_tree(X_train, scores, depth)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, ifelse(y2 == 1, 2, 'NA'))))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
seeds <- c('1', '2', '3', '4', '5')
splits <- c('1', '2', '3', '4', '5')
dataset_type <- 'r0.11'
oosp_random <- c()
oosp_r0.06 <- c()
oosp_r0.11 <- c()
dataset_type <- '0.33'
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('seed{seed}/data_train_enc_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('seed{seed}/data_test_enc_{dataset_type}_{split}.csv'))
oosp_random <- append(oosp_random, run(df_train, df_test, 2, dataset_type))
}
}
dataset_type <- 'r0.06'
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('seed{seed}/data_train_enc_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('seed{seed}/data_test_enc_{dataset_type}_{split}.csv'))
oosp_r0.06 <- append(oosp_r0.06, run(df_train, df_test, 2, dataset_type))
}
}
dataset_type <- 'r0.11'
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('seed{seed}/data_train_enc_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('seed{seed}/data_test_enc_{dataset_type}_{split}.csv'))
oosp_r0.11 <- append(oosp_r0.11, run(df_train, df_test, 2, dataset_type))
}
}
results = data.frame(random=oosp_random, r0.06=oosp_r0.06, r0.11=oosp_r0.11)
colMeans(results)
transformed_results = data.frame()
for(i in 1:ncol(results)) {
print(names(results)[i])
buffer = data.frame(exp_design=rep(names(results)[i], 25), oosp=results[, i])
transformed_results <- rbind(transformed_results, buffer)
}
ggplot(transformed_results, aes(x=exp_design, y=oosp)) +
geom_boxplot()
library(policytree)
library(grf)
library(tictoc)
library(glue)
library(ggplot2)
library(dplyr)
setwd('/Users/nathanjo/Documents/Github/prescriptive-trees/data/Warfarin_v2/rf_balance_proba_white')
run = function(df_train, df_test, depth, dataset_type) {
get_scores = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, ml0,
ifelse(t==1, ml1, ifelse(t==2, ml2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
scores <- df_train[, c('ml0', 'ml1', 'ml2')]
scores <- scores %>% rename('0'='ml0',
'1'="ml1",
'2'="ml2")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
get_scores_not33 = function(df_train) {
df_train = df_train %>% mutate(y_pred = ifelse(t == 0, lrrf0,
ifelse(t==1, lrrf1, ifelse(t==2, lrrf2, 'NA')))) %>%
transform(y_pred = as.numeric(y_pred))
bias <- (df_train$y - df_train$y_pred)/df_train$prob_t_pred_tree
# scores <- df_train[, c('lrrf0', 'lrrf1', 'lrrf2')]
# scores <- scores %>% rename('0'='lrrf0',
#                             '1'="lrrf1",
#                             '2'="lrrf2")
scores <- df_train[, c('lrrf0', 'lrrf1')]
scores <- scores %>% rename('0'='lrrf0',
'1'="lrrf1")
for(i in 1:ncol(scores)) {
scores[, i] <- scores[, i] + bias
}
return(scores)
}
if(dataset_type == '0.33') {
scores <- get_scores(df_train)
}
else{
scores <- get_scores_not33(df_train)
}
X_train <- data.matrix(df_train[ , !(names(df_train) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred',
'White', 'lrrf0', 'lrrf1', 'lrrf2',
'lr0', 'lr1', 'lr2'))])
y_train <- data.matrix(df_train[c('y')])
t_train <- factor(df_train[, 't'], labels=c(0, 1, 2))
X_test <- data.matrix(df_test[ , !(names(df_test) %in% c('y', 't', 'y0',
'y1', 'y2', 'prob_t_pred_tree',
'ml0', 'ml1', 'ml2', 'y_pred',
'White', 'lrrf0', 'lrrf1', 'lrrf2',
'lr0', 'lr1', 'lr2'))])
y_test <- data.matrix(df_test[c('y')])
t_test <- factor(df_test[, 't'], labels=c(0, 1, 2))
tic('policytree')
tree <- policy_tree(X_train, scores, depth)
# policy_tree(X_train, scores, 2)
toc()
node.id <- predict(tree, X_test, type='action.id')
print(tree)
node.id <- node.id-1
df_test = df_test %>% mutate(t_opt = ifelse(y0 == 1, 0,
ifelse(y1 == 1, 1, ifelse(y2 == 1, 2, 'NA'))))
eval_policy <- node.id == df_test$t_opt
return(sum(eval_policy)/length(eval_policy))
}
seeds <- c('1', '2', '3', '4', '5')
splits <- c('1', '2', '3', '4', '5')
dataset_type <- 'r0.11'
oosp_random <- c()
oosp_r0.06 <- c()
oosp_r0.11 <- c()
dataset_type <- 'r0.11'
for (seed in seeds) {
for (split in splits) {
df_train <- read.csv(glue('seed{seed}/data_train_{dataset_type}_{split}.csv'))
df_test <- read.csv(glue('seed{seed}/data_test_{dataset_type}_{split}.csv'))
oosp_r0.11 <- append(oosp_r0.11, run(df_train, df_test, 2, dataset_type))
}
}
