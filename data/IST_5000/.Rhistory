plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 50.001, sd = 10)
h2 <- hist(x2, breaks=100, plot=FALSE)
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 55, sd = 15)
h2 <- hist(x2, breaks=100, plot=FALSE)
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 55, sd = 15)
h2 <- hist(x2, breaks=100, plot=FALSE)
plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 55, sd = 10)
h2 <- hist(x2, breaks=100, plot=FALSE)
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 55, sd = 10)
h2 <- hist(x2, breaks=100, plot=FALSE)
plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 55, sd = 10)
h2 <- hist(x2, breaks=100, plot=FALSE)
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
x1 = rnorm(1000,mean = 50, sd = 5)
h1 <- hist(x1, breaks=100, plot=FALSE)
x2 = rnorm(1000,mean = 55, sd = 10)
h2 <- hist(x2, breaks=100, plot=FALSE)
# plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
# plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120))  # second
plot( h1, col=rgb(0,0,1,1/4), xlim=c(0,120))  # first histogram
plot( h2, col=rgb(1,0,0,1/4), xlim=c(0,120), add=T)  # second
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
setwd("/Users/sina/Desktop/FlowOCT-ManagementScience2020/Results/")
data_train= read.csv('train.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data_test= read.csv('test.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
forpres=FALSE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "/Users/sina/Desktop/FlowOCT-ManagementScience2020/Figures/"
data_train$sample <- as.factor(data_train$sample)
data_train$depth <- as.factor(data_train$depth)
data_test$sample <- as.factor(data_test$sample)
data_test$depth <- as.factor(data_test$depth)
tmp <- subset(data_train, data_train$regularization == FALSE &  data_train$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BinOCT","3600",max(subset(tmp, tmp$Approach=="BinOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT", "BinOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[4], brewer.pal(4, 'Set1')[1] ) #c("firebrick1 == 1","violetred==4","seagreen4==3","royalblue==2")
shapes <- c(15,16,17,4)
g1 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(text = element_text(size=14,family=fontfam))
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_no_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_no_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == TRUE)
tmp$approach <- droplevels(tmp$approach)
tmp <- subset(tmp, tmp$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[1], brewer.pal(4, 'Set1')[4] )
shapes <- c(15,16,4,17)
#c("firebrick1","violetred","seagreen4","royalblue")(1,3,2,4)
g2 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "right", text = element_text(size=14,family=fontfam))
print(g2)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == TRUE)
tmp$approach <- droplevels(tmp$approach)
tmp <- subset(tmp, tmp$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[1], brewer.pal(4, 'Set1')[4] )
shapes <- c(15,16,4,17)
#c("firebrick1","violetred","seagreen4","royalblue")(1,3,2,4)
g2 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "bottom", text = element_text(size=14,family=fontfam))
print(g2)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == TRUE)
tmp$approach <- droplevels(tmp$approach)
tmp <- subset(tmp, tmp$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[1], brewer.pal(4, 'Set1')[4] )
shapes <- c(15,16,4,17)
#c("firebrick1","violetred","seagreen4","royalblue")(1,3,2,4)
g2 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "right", text = element_text(size=14,family=fontfam))
print(g2)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == FALSE &  data_train$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BinOCT","3600",max(subset(tmp, tmp$Approach=="BinOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT", "BinOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[4], brewer.pal(4, 'Set1')[1] ) #c("firebrick1 == 1","violetred==4","seagreen4==3","royalblue==2")
shapes <- c(15,16,17,4)
g1 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "right",text = element_text(size=14,family=fontfam))
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_no_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_no_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == FALSE &  data_train$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BinOCT","3600",max(subset(tmp, tmp$Approach=="BinOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT", "BinOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[4], brewer.pal(4, 'Set1')[1] ) #c("firebrick1 == 1","violetred==4","seagreen4==3","royalblue==2")
shapes <- c(15,16,17,4)
g1 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "bottom",text = element_text(size=14,family=fontfam))
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_no_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_no_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == FALSE &  data_train$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BinOCT","3600",max(subset(tmp, tmp$Approach=="BinOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT", "BinOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[4], brewer.pal(4, 'Set1')[1] ) #c("firebrick1 == 1","violetred==4","seagreen4==3","royalblue==2")
shapes <- c(15,16,17,4)
g1 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "bottom",text = element_text(size=14,family=fontfam))
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_no_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5.5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_no_regularization.pdf",sep = ""),device = "pdf", width = 5.5, height = 3.3, units =  "in")
}
tmp <- subset(data_train, data_train$regularization == FALSE &  data_train$status %in% c(2,101,102))
tmp <- tmp[order(tmp$solving_time),]
tmp$numOfInstances <- rowidv(tmp, cols="approach")
tmp <- tmp[,c("approach","solving_time","numOfInstances")]
names(tmp) <- c("Approach","solving_time","numOfInstances")
tmp[nrow(tmp) + 1,] = list("OCT","3600",max(subset(tmp, tmp$Approach=="OCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BinOCT","3600",max(subset(tmp, tmp$Approach=="BinOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("FlowOCT","3600",max(subset(tmp, tmp$Approach=="FlowOCT")$numOfInstances))
tmp[nrow(tmp) + 1,] = list("BendersOCT","3600",max(subset(tmp, tmp$Approach=="BendersOCT")$numOfInstances))
tmp$solving_time <- as.numeric(as.character(tmp$solving_time))
tmp$numOfInstances <- as.numeric(as.character(tmp$numOfInstances))
tmp$Approach  <- factor(tmp$Approach , levels = c("BendersOCT", "FlowOCT", "BinOCT","OCT"))
tmp <- tmp[order(tmp$Approach),]
colors <- c( brewer.pal(4, 'Set1')[3], brewer.pal(4, 'Set1')[2], brewer.pal(4, 'Set1')[4], brewer.pal(4, 'Set1')[1] ) #c("firebrick1 == 1","violetred==4","seagreen4==3","royalblue==2")
shapes <- c(15,16,17,4)
g1 <- ggplot(data = tmp, aes(x=solving_time, y=numOfInstances, group=Approach,color=Approach)) +
geom_line(size=0.5)+ #aes(linetype=Approach)
geom_point(aes(shape=Approach),size=2)+
labs(x="Time (s)", y = "Number of Instances Solved")+
scale_color_manual(values=colors)+
scale_shape_manual(values=shapes)+
theme(legend.position = "right",text = element_text(size=14,family=fontfam))
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"class_perf_opt_no_regularization_presentation.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
} else {
ggsave(paste(figure_path,"class_perf_opt_no_regularization.pdf",sep = ""),device = "pdf", width = 5, height = 3.3, units =  "in")
}
rm(list=ls())
graphics.off()
setwd("/Users/sina/Documents/GitHub/prescriptive-trees/Direct_Approach/")
##########################################################################################################
# Parameters
##########################################################################################################
# Choose the seeds
seeds = c(123,156,67,1,43)
training_portion = 0.75
##########################################################################################################
# read data
##########################################################################################################
data <- read.csv("/Users/sina/Documents/GitHub/prescriptive-trees/Direct_Approach/cleaned_IST_enc.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
names(data)
View(data)
summary(data$t)
data$t <- as.factor(data$t)
summary(data$t)
setwd("/Users/sina/Documents/GitHub/prescriptive-trees/data/IST_5000/")
rm(list=ls())
graphics.off()
setwd("/Users/sina/Documents/GitHub/prescriptive-trees/data/IST_5000/")
##########################################################################################################
# Parameters
##########################################################################################################
# Choose the seeds
seeds = c(123,156,67,1,43)
training_portion = 0.75
rm(list=ls())
graphics.off()
setwd("/Users/sina/Documents/GitHub/prescriptive-trees/data/IST_5000/")
##########################################################################################################
# Parameters
##########################################################################################################
# Choose the seeds
seeds = c(123,156,67,1,43)
training_portion = 0.75
# Run = 1
# set.seed(seeds[Run])
##########################################################################################################
# read data
##########################################################################################################
data <- read.csv("/Users/sina/Documents/GitHub/prescriptive-trees/Direct_Approach/cleaned_IST.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data_enc <- read.csv("/Users/sina/Documents/GitHub/prescriptive-trees/Direct_Approach/cleaned_IST_enc.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data$t <- as.factor(data$t)
data_enc$t <- as.factor(data_enc$t)
Run = 1
View(data)
View(data)
View(data_enc)
set.seed(seeds[Run])
##########################################################################################################
# Splitting data into training and test
##########################################################################################################
## 75% of the sample size
# smp_size <- floor(training_portion * nrow(data))
smp_size = 5000
## set the seed to make your partition reproducible
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
data_train <- data[train_ind, ]
data_test <- data[-train_ind, ]
names(data)
##########################################################################################################
# Learning propensity score P(t|x) for each entry using decision tree
##########################################################################################################
t_train_data = data_train[,!(names(data_train) %in% c("y","y0","y1","y2","y3","y4","y5"))]
t_test_data = data_test[,!(names(data_test) %in% c("y","y0","y1","y2","y3","y4","y5"))]
names(data)
names(t_train_data)
names(t_test_data)
train_control<- trainControl(method="repeatedcv", number=10, repeats = 3)
library(data.table)
library(Publish)
library(caret)
library(sigmoid)
library(rpart)
train_control<- trainControl(method="repeatedcv", number=10, repeats = 3)
model.cv <- train(t ~ .,
data = t_train_data,
method = "rpart",
trControl = train_control)
model <- model.cv$finalModel
data_train_enc <- data_enc[train_ind, ]
data_test_enc <- data_enc[-train_ind, ]
View(data_train_enc)
View(data_train)
data_train_enc$prob_t_pred_tree <- NA
data_test_enc$prob_t_pred_tree <- NA
for(t in levels(data$t)){
index <- data_train$t == t
data_train_enc$prob_t_pred_tree[index]  <- predict(model, t_train_data, type = "prob")[index,t]
index <- data_test$t == t
data_test_enc$prob_t_pred_tree[index]  <- predict(model, t_test_data, type = "prob")[index,t]
}
summary(data_train$t)/nrow(data_train)
summary(data_train_enc$t)/nrow(data_train_enc)
View(data_train_enc)
rm(t_train_data,t_test_data)
rm(t_train_data,t_test_data,data_train,data_test)
rm(model,model.cv)
rm(model,model.cv,train_control)
View(data_train_enc)
View(data_test_enc)
rm(list=ls())
graphics.off()
setwd("/Users/sina/Documents/GitHub/prescriptive-trees/data/IST_5000/")
# library(data.table)
# library(Publish)
# library(caret)
# library(sigmoid)
# library(rpart)
rm(list=ls())
graphics.off()
setwd("/Users/sina/Documents/GitHub/prescriptive-trees/data/IST_5000/")
##########################################################################################################
# Parameters
##########################################################################################################
# Choose the seeds
seeds = c(123,156,67,1,43)
training_portion = 0.75
# Run = 1
# set.seed(seeds[Run])
##########################################################################################################
# read data
##########################################################################################################
data <- read.csv("/Users/sina/Documents/GitHub/prescriptive-trees/Direct_Approach/cleaned_IST.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data_enc <- read.csv("/Users/sina/Documents/GitHub/prescriptive-trees/Direct_Approach/cleaned_IST_enc.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data$t <- as.factor(data$t)
data_enc$t <- as.factor(data_enc$t)
for(Run in c(1,2,3,4,5)){
set.seed(seeds[Run])
##########################################################################################################
# Splitting data into training and test
##########################################################################################################
## 75% of the sample size
# smp_size <- floor(training_portion * nrow(data))
smp_size = 5000
## set the seed to make your partition reproducible
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
data_train <- data[train_ind, ]
data_test <- data[-train_ind, ]
data_train_enc <- data_enc[train_ind, ]
data_test_enc <- data_enc[-train_ind, ]
##########################################################################################################
# Learning propensity score P(t|x) for each entry using decision tree
##########################################################################################################
t_train_data = data_train[,!(names(data_train) %in% c("y","y0","y1","y2","y3","y4","y5"))]
t_test_data = data_test[,!(names(data_test) %in% c("y","y0","y1","y2","y3","y4","y5"))]
train_control<- trainControl(method="repeatedcv", number=10, repeats = 3)
model.cv <- train(t ~ .,
data = t_train_data,
method = "rpart",
trControl = train_control)
model <- model.cv$finalModel
data_train_enc$prob_t_pred_tree <- NA
data_test_enc$prob_t_pred_tree <- NA
for(t in levels(data$t)){
index <- data_train$t == t
data_train_enc$prob_t_pred_tree[index]  <- predict(model, t_train_data, type = "prob")[index,t]
index <- data_test$t == t
data_test_enc$prob_t_pred_tree[index]  <- predict(model, t_test_data, type = "prob")[index,t]
}
rm(t_train_data,t_test_data,data_train,data_test)
# par(xpd = TRUE)
# plot(model, compress = TRUE)
# text(model, use.n = TRUE)
rm(model,model.cv,train_control)
##########################################################################################################
# Save the files
##########################################################################################################
# Save files
write.csv(data_train_enc,paste("data_train_enc_",toString(Run),".csv",sep=''),row.names = FALSE)
write.csv(data_test_enc,paste("data_test_enc_",toString(Run),".csv",sep=''),row.names = FALSE)
}
# st = ""
# for(s in names(data)){
#   s = paste('\'',s,'\'',sep = "")
#   st = paste(st,",",s,sep = "")
# }
rm(list=ls())
data <- read.csv("/Users/sina/Documents/GitHub/prescriptive-trees/data/IST_5000/data_train_enc_5.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
View(data)
summary(data$t)/nrow(data)
data$t <- as.factor(data$t)
summary(data$t)/nrow(data)
names(data)
